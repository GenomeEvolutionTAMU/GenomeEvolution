Note: ALL floats must contain values to the left of the period (e.g. 0.2 instead of .2)

 888888ba                                                        dP oo   dP   oo                   
 88    `8b                                                       88      88                        
a88aaaa8P' .d8888b. 88d888b. .d8888b. .d8888b. 88d888b. .d8888b. 88 dP d8888P dP .d8888b. .d8888b. 
 88        88ooood8 88'  `88 Y8ooooo. 88'  `88 88'  `88 88'  `88 88 88   88   88 88ooood8 Y8ooooo. 
 88        88.  ... 88             88 88.  .88 88    88 88.  .88 88 88   88   88 88.  ...       88 
 dP        `88888P' dP       `88888P' `88888P' dP    dP `88888P8 dP dP   dP   dP `88888P' `88888P' 


The roll array describes the chances for each jump outcome, i.e.
0: Nothing happens
1: Excision
2: Mobilization
3: Copy-paste
4: Copy-paste-silence

The chances accumulate, and there is an implied 100% chance at the end of every array (do not ever explicitly enter a 1)
so equal chances for any outcome would be
[0.2, 0.4, 0.6, 0.8] (again, note that [0.2, 0.4, 0.6, 0.8, 1] would actually be wrong; don't ever put in a 1)

and a 100% chance for outcome 2 would be
[0, 0] (because of the implied 1 (really, don't do an explicit 1))

and a 50% chance for outcome 2 and 50% chance for outcome 4 would be
[0, 0, 0.5, 0] (or more accurately [0, 0, 0.5, x] where x is anything <= .5)

and a 100% chance for outcome 0 would be
[]


The keys of the range dicts are floats that describe probability, behaving in the same way except:
0 is not quite 0%, 1 is 100% (so explicit 1s are necessary; there is no use in defining a range with 0% chance anyway)
Each element of the range dicts is another dict describing that movement

The movement dicts have the following default properties
(Note that you do not need to explicitly state every property if you want to use the
default values, e.g. you only have to put "this_cmsm" if you want it to be false)
X:{
"this_cmsm": true, #Can jump to another spot on this chromosome
"other_cmsm": true, #Can jump to a spot on the other chromosome
"min_dist": 1, #If this_cmsm is true, this is the smallest distance it will move; if the chromosome is too short, it will move until it runs out of space. This really shouldn't ever be lower than 1
"max_dist": -1, #If this_cmsm is true, this is the largest distance it will move; -1 means the whole chromosome
"min_range": 0.0, #If other_cmsm is true, this is the leftmost spot as a percentage it will jump to
"max_range": 1.0 #If other_cmsm is true, this is the rightmost spot as a percentage it will jump to
}

You can define two different range dicts for jumping and copying, or just one range dict for both
j_range = {} # If defined, the ATE will use this range dict when jumping
c_range = {} # If defined, the ATE will use this range dict when copying
range = {} # If jumping and j_range is not defined, use this; if copying and c_range is not defined, use this
If the range that an ATE looks for isn't defined, it resorts to using the default values

By having a bunch of different movements with specific behavior, we can easily define some complicated movement behavior.

The format for a new ATE family is as follows:
[codename] # The codename is a short, descriptive name. It can really be any value at all, as long as it is unique

title="Family Name" # The name that shows up in the game
roll=[] # Described above
range={} # Described above